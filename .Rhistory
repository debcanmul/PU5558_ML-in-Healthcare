fev_average %>%
mutate(smoke = as.character(smoke)) %>%
ggplot(aes(x = age, y = fev_mean)) +
geom_line(aes(colour = smoke))
fev_data %>%
mutate(smoke = as.character(smoke)) %>%
ggplot(aes(x = smoke)) +
geom_bar()  # by default, the y variable is the count of the x (in this case, number of smokers)
fev_count <- fev_data %>%
group_by(sex, smoke) %>%
summarise(smoke_count = n())
fev_count <- fev_data %>%
mutate(Smoke = ifelse(smoke == 1, "Smoker", "Non-smoker"),
Sex = ifelse(sex == 1, "Male", "Female")) %>%
group_by(Sex, Smoke) %>%
summarise(Count = n())
fev_count %>%
ggplot(aes(x = Smoke, y = Count, fill = Sex)) +
geom_bar(stat = "identity",     # "identity" allows us to specify a y variable, otherwise it is count (as above)
position = "dodge") +  # Put bars side-by-side instead of stacked
scale_fill_brewer(palette="Spectral")
fev_data %>%
filter(age < 18 & age > 9) %>%
mutate(smoke = as.character(smoke),
age = as.character(age)) %>%
ggplot(aes(x = age, y = fev, colour = smoke)) +
geom_boxplot() +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
fev_data %>%
group_by(sex) %>%
summarise(mean(height), sd(height))
table(fev_data$age)
fev_data %>%
filter(age>15) %>%
group_by(sex) %>%
summarise(mean(height), sd(height))
fev_data %>%
group_by(age,sex) %>%
summarise(n(),mean(height), sd(height)) %>%
arrange(desc(age)) %>%
print(n=40)
fev_data %>%
group_by(smoke) %>%
summarise(mean(fev))
fev_data %>%
group_by(age,smoke) %>%
summarise(n = n(), mean = mean(fev), sd = sd(fev)) %>%
filter(n>5) %>%  # here I am only including rows where we have at least five people - to remove low counts
arrange(desc(age))
library("factoextra")
knitr::opts_chunk$set(echo = TRUE)
install.packages("cluster")
library(tidyverse)
library(tidymodels)
library(factoextra)
library(cluster)
# from https://www.tidymodels.org/learn/statistics/k-means/
set.seed(27)  # this ensures we always generate the same data, for reproducibility
centers <- tibble(
cluster = factor(1:3),
num_points = c(100, 150, 50),  # number of points in each cluster
x1 = c(5, 0, -3),              # x1 coordinate of cluster center
x2 = c(-1, 1, -2)              # x2 coordinate of cluster center
)
labelled_points <-
centers %>%
mutate(
x1 = map2(num_points, x1, rnorm),
x2 = map2(num_points, x2, rnorm)
) %>%
select(-num_points) %>%
unnest(cols = c(x1, x2))
# have a look at the contents of labelled_points
glimpse(labelled_points)
# plot the two numerical columns x1 and x2 against each other, and colour by cluster
ggplot(labelled_points, aes(x1, x2, color = cluster)) +
geom_point(alpha = 0.3)
points <-
labelled_points %>%
select(-cluster)  # remove the "cluster" column as this is what we are trying to find
kclust <- kmeans(points, centers = 3)  # we want three clusters
# Let's have a look at the output "kclust":
kclust
points <-
labelled_points %>%
select(-cluster)  # remove the "cluster" column as this is what we are trying to find
kclust <- kmeans(points, centers = 3)  # we want three clusters
# Let's have a look at the output "kclust":
kclust
kclust$tot.withinss
fviz_cluster(kclust, data = points)
# For this function, if we don't specify the maximum number of clusters (k.max), the default is 10
fviz_nbclust(points, kmeans, k.max = 10, method = "wss")
fviz_nbclust(points, kmeans, k.max = 10, method = "silhouette")
scot_data <- read_csv("Scotland-Vulnerability-Resource_v0.2.csv")
glimpse(scot_data)
health_data <- scot_data %>%
filter(NHS_Health_Board_Region=="Grampian") %>%  # select only the rows in Grampian
select(Data_Zone,CIF,ALCOHOL,DRUG,SMR,EMERG) %>%
drop_na() %>%  # remove rows with missing values
unique() # keep only unique rows - we need this because the spatial resolution of the data is datazones, but each row is a different postcode, which means that there are multiple rows for each datazone
points <- health_data %>%
select(-Data_Zone) # The "Data Zone" variable will not be used for clustering
summary(points)
points %>%
ggplot(aes(x=CIF,y=ALCOHOL)) +
geom_point(alpha = 0.8)
health_data %>%
pivot_longer(-Data_Zone) %>%  # this reformats the data so we can create boxplots for each numeric column
ggplot(aes(x=name,y=value,fill=name))+
geom_boxplot() +
geom_jitter(alpha = 0.1)# add data points
points %>%
ggplot(aes(x=DRUG,y=SMR)) +
geom_point(alpha = 0.8)
points %>%
ggplot(aes(x=SMR,y=DRUG)) +
geom_point(alpha = 0.8)
fviz_nbclust(points, kmeans, k.max = 5, method = "silhouette")
fviz_nbclust(points, kmeans, k.max = 5, method = "wss")
kclust <- kmeans(points, centers = 2)
kclust$size
kclust$centers
data_clustered <- augment(kclust, points)
data_clustered %>%
ggplot(aes(x=CIF,y=ALCOHOL)) +
geom_point(aes(color = .cluster), alpha = 0.8)
knitr::opts_chunk$set(echo = TRUE)
install.packages("cluster")
library(tidyverse)
library(tidymodels)
library(factoextra)
library(cluster)
# from https://www.tidymodels.org/learn/statistics/k-means/
set.seed(27)  # this ensures we always generate the same data, for reproducibility
centers <- tibble(
cluster = factor(1:3),
num_points = c(100, 150, 50),  # number of points in each cluster
x1 = c(5, 0, -3),              # x1 coordinate of cluster center
x2 = c(-1, 1, -2)              # x2 coordinate of cluster center
)
labelled_points <-
centers %>%
mutate(
x1 = map2(num_points, x1, rnorm),
x2 = map2(num_points, x2, rnorm)
) %>%
select(-num_points) %>%
unnest(cols = c(x1, x2))
# have a look at the contents of labelled_points
glimpse(labelled_points)
# plot the two numerical columns x1 and x2 against each other, and colour by cluster
ggplot(labelled_points, aes(x1, x2, color = cluster)) +
geom_point(alpha = 0.3)
points <-
labelled_points %>%
select(-cluster)  # remove the "cluster" column as this is what we are trying to find
kclust <- kmeans(points, centers = 3)  # we want three clusters
# Let's have a look at the output "kclust":
kclust
kclust$tot.withinss
fviz_cluster(kclust, data = points)
# For this function, if we don't specify the maximum number of clusters (k.max), the default is 10
fviz_nbclust(points, kmeans, k.max = 10, method = "wss")
fviz_nbclust(points, kmeans, k.max = 10, method = "silhouette")
scot_data <- read_csv("Scotland-Vulnerability-Resource_v0.2.csv")
glimpse(scot_data)
health_data <- scot_data %>%
filter(NHS_Health_Board_Region=="Grampian") %>%  # select only the rows in Grampian
select(Data_Zone,CIF,ALCOHOL,DRUG,SMR,EMERG) %>%
drop_na() %>%  # remove rows with missing values
unique() # keep only unique rows - we need this because the spatial resolution of the data is datazones, but each row is a different postcode, which means that there are multiple rows for each datazone
points <- health_data %>%
select(-Data_Zone) # The "Data Zone" variable will not be used for clustering
summary(points)
points %>%
ggplot(aes(x=CIF,y=ALCOHOL)) +
geom_point(alpha = 0.8)
points %>%
ggplot(aes(x=SMR,y=DRUG)) +
geom_point(alpha = 0.8)
health_data %>%
pivot_longer(-Data_Zone) %>%  # this reformats the data so we can create boxplots for each numeric column
ggplot(aes(x=name,y=value,fill=name))+
geom_boxplot() +
geom_jitter(alpha = 0.1)# add data points
fviz_nbclust(points, kmeans, k.max = 5, method = "silhouette")
fviz_nbclust(points, kmeans, k.max = 5, method = "wss")
kclust <- kmeans(points, centers = 2)
kclust$size
kclust$centers
data_clustered <- augment(kclust, points)
data_clustered %>%
ggplot(aes(x=CIF,y=ALCOHOL)) +
geom_point(aes(color = .cluster), alpha = 0.8)
head(health_data)
#need to give coordinates to fviz_cluster
clustertest<-health_data %>%
select(SMR,EMERG)%>%
fviz_cluster(kclust, data =clustertest)
head(scot_data)
#checking for other regions in the NHS Health Board
scot_data%>%
select(NHS_Health_Board_Region)%>%
unique()
health_data2 <- scot_data %>%
filter(NHS_Health_Board_Region=="Tayside") %>%  # select only the rows in Tayside
select(Data_Zone,CIF,ALCOHOL,DRUG,SMR,EMERG) %>%
drop_na() %>%  # remove rows with missing values
unique() # keep only unique rows - we need this because the spatial resolution of the data is datazones, but each row is a different postcode, which means that there are multiple rows for each datazone
points2 <- health_data2 %>%
select(-Data_Zone) # The "Data Zone" variable will not be used for clustering
summary(points2)
points2 %>%
ggplot(aes(x=CIF,y=ALCOHOL)) +
geom_point(alpha = 0.8)
health_data2 %>%
pivot_longer(-Data_Zone) %>%  # this reformats the data so we can create boxplots for each numeric column
ggplot(aes(x=name,y=value,fill=name))+
geom_boxplot() +
geom_jitter(alpha = 0.1)# add data points
fviz_nbclust(points2, kmeans, k.max = 5, method = "silhouette")
fviz_nbclust(points2, kmeans, k.max = 5, method = "wss")
geog_acc <- scot_data %>%
filter(NHS_Health_Board_Region=="Grampian") %>%  # select only the rows in Grampian
select(Data_Zone,drive_petrol,drive_GP,drive_post,
drive_primary,drive_retail,drive_secondary) %>%  # select only the geographic access columns
drop_na() %>%  # remove rows with missing values
unique() # keep only unique rows - we need this because the spatial resolution of the data is datazones, but each row is a different postcode, which means that there are multiple rows for each datazone
points <- geog_acc %>%
select(-Data_Zone) # The "Data Zone" variable will not be used for clustering
summary(points)
points %>%
ggplot(aes(x=drive_petrol,y=drive_GP)) +
geom_point(alpha = 0.8)
geog_acc %>%
pivot_longer(-Data_Zone) %>%  # this reformats the data so we can create boxplots for each numeric column
ggplot(aes(x=name,y=value,fill=name))+
geom_boxplot() +
geom_jitter(alpha = 0.1)# add data points
categ_points <- points %>%
mutate(across(everything(),  # here we want to apply the function cut() to all variables
~ cut(.x,
breaks=c(0, 8, Inf), # cut() divides a continuous variable into intervals
labels=c("quick","slow"))))
hier_cluster <- categ_points %>%
daisy(metric = "gower") %>%
hclust(method = "complete")
hier_cluster <- categ_points %>%
daisy(metric = "gower") %>%
hclust(method = "complete")
# Here we are colouring 2 clusters, but you could change that to any number or remove
fviz_dend(hier_cluster, main = "complete", k=2, show_labels = FALSE)
?daisy
?hclust
hier_cluster <- categ_points %>%
daisy(metric = "gower") %>%
hclust(method = "complete")
hier_cluster <- categ_points %>%
daisy(metric = "gower") %>%
hclust(method = "complete")
hier_cluster_n <- points %>%
daisy(metric = "gower") %>%
hclust(method = "complete")
fviz_dend(hier_cluster_n, main = "complete", k=2, show_labels = FALSE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("corrplot")
install.packages("vip")
library(tidyverse)    # for general data science
library(tidymodels)   # for machine learning
library(corrplot)     # for visualising correlation matrices
library(vip)          # for variable importance plots
scot_data <- read_csv("Scotland-Vulnerability-Resource_v0.2.csv")
glimpse(scot_data)
DZ_data <- scot_data %>%
select(-Postcode) %>%
drop_na() %>%    # remove rows with missing values
unique()         # keep unique rows
DZ_data <- DZ_data %>%
select(-Data_Zone,-Intermediate_Zone,-Council_area,-NHS_Health_Board_Region,-Total_population,-Working_age_population,-URname)
DZ_data %>%
ggplot(aes(x = DEPRESS)) +
geom_histogram(bins = 30, col= "white")
# Create the split
DZ_split <- DZ_data %>%
initial_split(prop = 0.8,        # proportion in training set
strata = DEPRESS)  # ensure distribution of DEPRESS in the two datasets in similar
# Save the two datasets as objects
DZ_train <- training(DZ_split)
DZ_test <- testing(DZ_split)
DZ_cor <- cor(DZ_train %>% select_if(is.numeric))  # we can only use numeric variables to calculate correlation
corrplot(DZ_cor, tl.cex = 0.5)
DZ_train %>%
ggplot(aes(x = SIMD2020_Health_Domain_Rank, y = DEPRESS)) +
geom_point()
DZ_train %>%
ggplot(aes(x = Income_rate, y = DEPRESS)) +
geom_point()
DZ_train %>%
ggplot(aes(x = Employment_rate, y = DEPRESS)) +
geom_point()
DZ_train %>%
ggplot(aes(x = CIF, y = DEPRESS)) +
geom_point()
DZ_train %>%
ggplot(aes(x = EMERG, y = DEPRESS)) +
geom_point()
DZ_train %>%
ggplot(aes(x = Attendance, y = DEPRESS)) +
geom_point()
DZ_wflow <-workflow() %>%
add_recipe(simple_rec) %>%
add_model(lm_spec)
## A linear regression model specification with default settings
lm_spec <- linear_reg()
DZ_wflow <-workflow() %>%
add_recipe(simple_rec) %>%
add_model(lm_spec)
simple_rec <- DZ_train %>%
recipe(DEPRESS ~ Income_rate + Employment_rate + no_qualifications + CIF + EMERG + Attendance + SIMD2020_Health_Domain_Rank) %>%
step_zv(all_predictors()) %>%
step_corr(all_predictors())
## A linear regression model specification with default settings
lm_spec <- linear_reg()
DZ_wflow <-workflow() %>%
add_recipe(simple_rec) %>%
add_model(lm_spec)
DZ_wflow_fit <- DZ_wflow %>%
fit(data = DZ_train)
DZ_wflow <-workflow() %>%
add_recipe(simple_rec) %>%
add_model(lm_spec)
DZ_wflow_fit <- DZ_wflow %>%
fit(data = DZ_train)
fitted_model <- extract_fit_engine(DZ_wflow_fit)
plot(fitted_model, 1)
plot(fitted_model, 2)
plot(fitted_model, 3)
DZ_wflow_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 5)
# Use the model for prediction on the same data it was trained on (bad idea!)
predicted_DEPRESS <- DZ_wflow_fit %>%
predict(new_data = DZ_train)
# Add the predicted column to the dataset so we have everything in one dataframe
results_train <- DZ_train %>%
bind_cols(predicted_DEPRESS) %>%
rename(pred_DEPRESS = .pred)   # rename the predicted column
# Evaluate the performance
metrics(results_train, truth = DEPRESS, estimate = pred_DEPRESS)
# Use the model for prediction on the testing data now
predicted_DEPRESS_test <- DZ_wflow_fit %>%
predict(new_data = DZ_test)
# As before, add the predicted column to the dataset so we have everything in one dataframe
results_test <- DZ_test %>%
bind_cols(predicted_DEPRESS_test) %>%
rename(pred_DEPRESS = .pred)   # rename the predicted column
# Evaluate the performance
metrics(results_test, truth = DEPRESS, estimate = pred_DEPRESS)
results_test %>%
ggplot(aes(x = DEPRESS, y = pred_DEPRESS)) +
geom_abline(intercept=0, slope=1) +  # we want data to fall close to this line
geom_point() +
xlab("Actual outcome values") +
ylab("Predicted outcome values")
knitr::opts_chunk$set(echo = TRUE)
DZ_data %>%
ggplot(aes(x = DRUG)) +
geom_histogram(bins = 30, col= "white")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)    # for general data science
library(tidymodels)   # for machine learning
library(corrplot)     # for visualising correlation matrices
library(vip)          # for variable importance plots
scot_data <- read_csv("Scotland-Vulnerability-Resource_v0.2.csv")
glimpse(scot_data)
DZ_data <- scot_data %>%
select(-Postcode) %>%
drop_na() %>%    # remove rows with missing values
unique()         # keep unique rows
DZ_data <- DZ_data %>%
select(-Data_Zone,-Intermediate_Zone,-Council_area,-NHS_Health_Board_Region,-Total_population,-Working_age_population,-URname)
DZ_data <- DZ_data %>%
select(-Data_Zone,-Intermediate_Zone,-Council_area,-NHS_Health_Board_Region,-Total_population,-Working_age_population,-URname)
scot_data <- read_csv("Scotland-Vulnerability-Resource_v0.2.csv")
glimpse(scot_data)
DZ_data <- scot_data %>%
select(-Postcode) %>%
drop_na() %>%    # remove rows with missing values
unique()         # keep unique rows
DZ_data <- DZ_data %>%
select(-Data_Zone,-Intermediate_Zone,-Council_area,-NHS_Health_Board_Region,-Total_population,-Working_age_population,-URname)
DZ_data %>%
ggplot(aes(x = DRUG)) +
geom_histogram(bins = 30, col= "white")
DZ_data %>%
ggplot(aes(x = SMR)) +
geom_histogram(bins = 30, col= "white")
DZ_data %>%
ggplot(aes(x = DRUG)) +
geom_histogram(bins = 30, col= "white")
DZ_data %>%
ggplot(aes(x = SMR)) +
geom_histogram(bins = 30, col= "white")
knitr::opts_chunk$set(echo = TRUE)
# Create the split
DZ_split <- DZ_data %>%
initial_split(prop = 0.8,        # proportion in training set
strata = SMR)  # ensure distribution of SMR in the two datasets in similar
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)    # for general data science
library(tidymodels)   # for machine learning
library(corrplot)     # for visualising correlation matrices
library(vip)          # for variable importance plots
scot_data <- read_csv("Scotland-Vulnerability-Resource_v0.2.csv")
glimpse(scot_data)
DZ_data <- scot_data %>%
select(-Postcode) %>%
drop_na() %>%    # remove rows with missing values
unique()         # keep unique rows
DZ_data <- DZ_data %>%
select(-Data_Zone,-Intermediate_Zone,-Council_area,-NHS_Health_Board_Region,-Total_population,-Working_age_population,-URname)
DZ_data %>%
ggplot(aes(x = DRUG)) +
geom_histogram(bins = 30, col= "white")
DZ_data %>%
ggplot(aes(x = SMR)) +
geom_histogram(bins = 30, col= "white")
# Create the split
DZ_split <- DZ_data %>%
initial_split(prop = 0.8,        # proportion in training set
strata = SMR)  # ensure distribution of SMR in the two datasets in similar
# Save the two datasets as objects
DZ_train <- training(DZ_split)
DZ_test <- testing(DZ_split)
DZ_cor <- cor(DZ_train %>% select_if(is.numeric))  # we can only use numeric variables to calculate correlation
corrplot(DZ_cor, tl.cex = 0.5)
DZ_train %>%
ggplot(aes(x = Income_rate, y = SMR)) +
geom_point()
DZ_train %>%
ggplot(aes(x = Income_rate, y = SMR)) +
geom_point()
DZ_train %>%
ggplot(aes(x = Employment_rate, y = SMR)) +
geom_point()
DZ_train %>%
ggplot(aes(x = CIF, y = SMR)) +
geom_point()
DZ_train %>%
ggplot(aes(x = EMERG, y = SMR)) +
geom_point()
DZ_train %>%
ggplot(aes(x = EMERG, y = SMR)) +
geom_point()
simple_rec <- DZ_train %>%
recipe(SMR ~ Income_rate + Employment_rate + CIF + EMERG) %>%
step_zv(all_predictors()) %>%
step_corr(all_predictors())
## A linear regression model specification with default settings
lm_spec <- linear_reg()
DZ_wflow <-workflow() %>%
add_recipe(simple_rec) %>%
add_model(lm_spec)
DZ_wflow_fit <- DZ_wflow %>%
fit(data = DZ_train)
fitted_model <- extract_fit_engine(DZ_wflow_fit)
plot(fitted_model, 1)
plot(fitted_model, 1)
plot(fitted_model, 2)
plot(fitted_model, 3)
DZ_wflow_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 4)
DZ_wflow_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 5)
DZ_wflow_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 2)
# Use the model for prediction on the testing data now
predicted_SMR_test <- DZ_wflow_fit %>%
predict(new_data = DZ_test)
# As before, add the predicted column to the dataset so we have everything in one dataframe
results_test <- DZ_test %>%
bind_cols(predicted_SMR_test) %>%
rename(pred_SMR = .pred)   # rename the predicted column
# Evaluate the performance
metrics(results_test, truth = SMR, estimate = pred_SMR)
results_test %>%
ggplot(aes(x = SMR, y = pred_SMR)) +
geom_abline(intercept=0, slope=1) +  # we want data to fall close to this line
geom_point() +
xlab("Actual outcome values") +
ylab("Predicted outcome values")
knitr::opts_chunk$set(echo = TRUE)
```{r load packages}
library(tidyverse)    # for general data science
library(tidymodels)   # for machine learning
library(corrplot)     # for visualising correlation matrices
library(vip)          # for variable importance plots
bodyfat_data <- read_csv("bodyfat(1).csv")
bodyfat_data <- read_csv("bodyfat.csv")
bodyfat_data <- read_csv("bodyfat.csv")
bodyfat_data <- read_csv("bodyfat (1).csv")
bodyfat_data <- read_csv("bodyfat.csv")
bodyfat_data <- read_csv("bodyfat.csv")
bodyfat_data <- read_csv("bodyfat.csv")
bodyfat_data <- read_csv("Supervised Learning/bodyfat.csv")
glimpse(bodyfat_data)
